Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> const_section var_section subroutine_section
Rule 2     const_section -> const_section const_declaration
Rule 3     const_section -> empty
Rule 4     const_declaration -> CONST type ID ASSIGN expression SEMICOLON
Rule 5     var_section -> var_section var_declaration
Rule 6     var_section -> empty
Rule 7     var_declaration -> type ID ASSIGN expression SEMICOLON
Rule 8     var_declaration -> type ID SEMICOLON
Rule 9     subroutine_section -> subroutine_section subroutine_decl
Rule 10    subroutine_section -> empty
Rule 11    subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO statement_list END
Rule 12    subroutine_type -> VOID
Rule 13    subroutine_type -> INT
Rule 14    subroutine_type -> BOOL
Rule 15    subroutine_type -> STRING
Rule 16    param_list -> param_list COMMA param_decl
Rule 17    param_list -> param_decl
Rule 18    param_list -> empty
Rule 19    param_decl -> type ID
Rule 20    statement_list -> statement_list statement
Rule 21    statement_list -> empty
Rule 22    statement -> assignment_stmt
Rule 23    statement -> if_stmt
Rule 24    statement -> while_stmt
Rule 25    statement -> return_stmt
Rule 26    statement -> print_stmt
Rule 27    statement -> call_stmt SEMICOLON
Rule 28    assignment_stmt -> ID ASSIGN expression SEMICOLON
Rule 29    if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END
Rule 30    else_part -> ELSE statement_list
Rule 31    else_part -> empty
Rule 32    while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END
Rule 33    return_stmt -> RETURN expression SEMICOLON
Rule 34    print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 35    call_stmt -> ID LPAREN arg_list RPAREN
Rule 36    arg_list -> arg_list COMMA expression
Rule 37    arg_list -> expression
Rule 38    arg_list -> empty
Rule 39    expression -> ID LPAREN arg_list RPAREN
Rule 40    expression -> expression PLUS expression
Rule 41    expression -> expression MINUS expression
Rule 42    expression -> expression TIMES expression
Rule 43    expression -> expression DIVIDE expression
Rule 44    expression -> expression EQ expression
Rule 45    expression -> expression NEQ expression
Rule 46    expression -> expression GT expression
Rule 47    expression -> expression LT expression
Rule 48    expression -> expression AND expression
Rule 49    expression -> expression OR expression
Rule 50    expression -> NOT expression
Rule 51    expression -> LPAREN expression RPAREN
Rule 52    expression -> INT_LITERAL
Rule 53    expression -> STRING_LITERAL
Rule 54    expression -> TRUE
Rule 55    expression -> FALSE
Rule 56    expression -> ID
Rule 57    type -> VOID
Rule 58    type -> INT
Rule 59    type -> BOOL
Rule 60    type -> STRING
Rule 61    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 4 7 28
BOOL                 : 14 59
COMMA                : 16 36
CONST                : 4
DIVIDE               : 43
DO                   : 11 32
ELSE                 : 30
END                  : 11 29 32
EQ                   : 44
FALSE                : 55
GT                   : 46
ID                   : 4 7 8 11 19 28 35 39 56
IF                   : 29
INT                  : 13 58
INT_LITERAL          : 52
LPAREN               : 11 29 32 34 35 39 51
LT                   : 47
MINUS                : 41
NEQ                  : 45
NOT                  : 50
OR                   : 49
PLUS                 : 40
PRINT                : 34
RETURN               : 33
RPAREN               : 11 29 32 34 35 39 51
SEMICOLON            : 4 7 8 27 28 33 34
STRING               : 15 60
STRING_LITERAL       : 53
SUBROUTINE           : 11
THEN                 : 29
TIMES                : 42
TRUE                 : 54
VOID                 : 12 57
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

arg_list             : 35 36 39
assignment_stmt      : 22
call_stmt            : 27
const_declaration    : 2
const_section        : 1 2
else_part            : 29
empty                : 3 6 10 18 21 31 38
expression           : 4 7 28 29 32 33 34 36 37 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51
if_stmt              : 23
param_decl           : 16 17
param_list           : 11 16
print_stmt           : 26
program              : 0
return_stmt          : 25
statement            : 20
statement_list       : 11 20 29 30 32
subroutine_decl      : 9
subroutine_section   : 1 9
subroutine_type      : 11
type                 : 4 7 8 19
var_declaration      : 5
var_section          : 1 5
while_stmt           : 24

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . const_section var_section subroutine_section
    (2) const_section -> . const_section const_declaration
    (3) const_section -> . empty
    (61) empty -> .

    CONST           reduce using rule 61 (empty -> .)
    VOID            reduce using rule 61 (empty -> .)
    INT             reduce using rule 61 (empty -> .)
    BOOL            reduce using rule 61 (empty -> .)
    STRING          reduce using rule 61 (empty -> .)
    SUBROUTINE      reduce using rule 61 (empty -> .)
    $end            reduce using rule 61 (empty -> .)

    program                        shift and go to state 1
    const_section                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> const_section . var_section subroutine_section
    (2) const_section -> const_section . const_declaration
    (5) var_section -> . var_section var_declaration
    (6) var_section -> . empty
    (4) const_declaration -> . CONST type ID ASSIGN expression SEMICOLON
    (61) empty -> .

    CONST           shift and go to state 7
    VOID            reduce using rule 61 (empty -> .)
    INT             reduce using rule 61 (empty -> .)
    BOOL            reduce using rule 61 (empty -> .)
    STRING          reduce using rule 61 (empty -> .)
    SUBROUTINE      reduce using rule 61 (empty -> .)
    $end            reduce using rule 61 (empty -> .)

    var_section                    shift and go to state 4
    const_declaration              shift and go to state 5
    empty                          shift and go to state 6

state 3

    (3) const_section -> empty .

    CONST           reduce using rule 3 (const_section -> empty .)
    VOID            reduce using rule 3 (const_section -> empty .)
    INT             reduce using rule 3 (const_section -> empty .)
    BOOL            reduce using rule 3 (const_section -> empty .)
    STRING          reduce using rule 3 (const_section -> empty .)
    SUBROUTINE      reduce using rule 3 (const_section -> empty .)
    $end            reduce using rule 3 (const_section -> empty .)


state 4

    (1) program -> const_section var_section . subroutine_section
    (5) var_section -> var_section . var_declaration
    (9) subroutine_section -> . subroutine_section subroutine_decl
    (10) subroutine_section -> . empty
    (7) var_declaration -> . type ID ASSIGN expression SEMICOLON
    (8) var_declaration -> . type ID SEMICOLON
    (61) empty -> .
    (57) type -> . VOID
    (58) type -> . INT
    (59) type -> . BOOL
    (60) type -> . STRING

    SUBROUTINE      reduce using rule 61 (empty -> .)
    $end            reduce using rule 61 (empty -> .)
    VOID            shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    STRING          shift and go to state 15

    subroutine_section             shift and go to state 8
    var_declaration                shift and go to state 9
    empty                          shift and go to state 10
    type                           shift and go to state 11

state 5

    (2) const_section -> const_section const_declaration .

    CONST           reduce using rule 2 (const_section -> const_section const_declaration .)
    VOID            reduce using rule 2 (const_section -> const_section const_declaration .)
    INT             reduce using rule 2 (const_section -> const_section const_declaration .)
    BOOL            reduce using rule 2 (const_section -> const_section const_declaration .)
    STRING          reduce using rule 2 (const_section -> const_section const_declaration .)
    SUBROUTINE      reduce using rule 2 (const_section -> const_section const_declaration .)
    $end            reduce using rule 2 (const_section -> const_section const_declaration .)


state 6

    (6) var_section -> empty .

    VOID            reduce using rule 6 (var_section -> empty .)
    INT             reduce using rule 6 (var_section -> empty .)
    BOOL            reduce using rule 6 (var_section -> empty .)
    STRING          reduce using rule 6 (var_section -> empty .)
    SUBROUTINE      reduce using rule 6 (var_section -> empty .)
    $end            reduce using rule 6 (var_section -> empty .)


state 7

    (4) const_declaration -> CONST . type ID ASSIGN expression SEMICOLON
    (57) type -> . VOID
    (58) type -> . INT
    (59) type -> . BOOL
    (60) type -> . STRING

    VOID            shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    STRING          shift and go to state 15

    type                           shift and go to state 16

state 8

    (1) program -> const_section var_section subroutine_section .
    (9) subroutine_section -> subroutine_section . subroutine_decl
    (11) subroutine_decl -> . SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO statement_list END

    $end            reduce using rule 1 (program -> const_section var_section subroutine_section .)
    SUBROUTINE      shift and go to state 18

    subroutine_decl                shift and go to state 17

state 9

    (5) var_section -> var_section var_declaration .

    VOID            reduce using rule 5 (var_section -> var_section var_declaration .)
    INT             reduce using rule 5 (var_section -> var_section var_declaration .)
    BOOL            reduce using rule 5 (var_section -> var_section var_declaration .)
    STRING          reduce using rule 5 (var_section -> var_section var_declaration .)
    SUBROUTINE      reduce using rule 5 (var_section -> var_section var_declaration .)
    $end            reduce using rule 5 (var_section -> var_section var_declaration .)


state 10

    (10) subroutine_section -> empty .

    SUBROUTINE      reduce using rule 10 (subroutine_section -> empty .)
    $end            reduce using rule 10 (subroutine_section -> empty .)


state 11

    (7) var_declaration -> type . ID ASSIGN expression SEMICOLON
    (8) var_declaration -> type . ID SEMICOLON

    ID              shift and go to state 19


state 12

    (57) type -> VOID .

    ID              reduce using rule 57 (type -> VOID .)


state 13

    (58) type -> INT .

    ID              reduce using rule 58 (type -> INT .)


state 14

    (59) type -> BOOL .

    ID              reduce using rule 59 (type -> BOOL .)


state 15

    (60) type -> STRING .

    ID              reduce using rule 60 (type -> STRING .)


state 16

    (4) const_declaration -> CONST type . ID ASSIGN expression SEMICOLON

    ID              shift and go to state 20


state 17

    (9) subroutine_section -> subroutine_section subroutine_decl .

    SUBROUTINE      reduce using rule 9 (subroutine_section -> subroutine_section subroutine_decl .)
    $end            reduce using rule 9 (subroutine_section -> subroutine_section subroutine_decl .)


state 18

    (11) subroutine_decl -> SUBROUTINE . subroutine_type ID LPAREN param_list RPAREN DO statement_list END
    (12) subroutine_type -> . VOID
    (13) subroutine_type -> . INT
    (14) subroutine_type -> . BOOL
    (15) subroutine_type -> . STRING

    VOID            shift and go to state 22
    INT             shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    subroutine_type                shift and go to state 21

state 19

    (7) var_declaration -> type ID . ASSIGN expression SEMICOLON
    (8) var_declaration -> type ID . SEMICOLON

    ASSIGN          shift and go to state 26
    SEMICOLON       shift and go to state 27


state 20

    (4) const_declaration -> CONST type ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 28


state 21

    (11) subroutine_decl -> SUBROUTINE subroutine_type . ID LPAREN param_list RPAREN DO statement_list END

    ID              shift and go to state 29


state 22

    (12) subroutine_type -> VOID .

    ID              reduce using rule 12 (subroutine_type -> VOID .)


state 23

    (13) subroutine_type -> INT .

    ID              reduce using rule 13 (subroutine_type -> INT .)


state 24

    (14) subroutine_type -> BOOL .

    ID              reduce using rule 14 (subroutine_type -> BOOL .)


state 25

    (15) subroutine_type -> STRING .

    ID              reduce using rule 15 (subroutine_type -> STRING .)


state 26

    (7) var_declaration -> type ID ASSIGN . expression SEMICOLON
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 31

state 27

    (8) var_declaration -> type ID SEMICOLON .

    VOID            reduce using rule 8 (var_declaration -> type ID SEMICOLON .)
    INT             reduce using rule 8 (var_declaration -> type ID SEMICOLON .)
    BOOL            reduce using rule 8 (var_declaration -> type ID SEMICOLON .)
    STRING          reduce using rule 8 (var_declaration -> type ID SEMICOLON .)
    SUBROUTINE      reduce using rule 8 (var_declaration -> type ID SEMICOLON .)
    $end            reduce using rule 8 (var_declaration -> type ID SEMICOLON .)


state 28

    (4) const_declaration -> CONST type ID ASSIGN . expression SEMICOLON
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 38

state 29

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID . LPAREN param_list RPAREN DO statement_list END

    LPAREN          shift and go to state 39


state 30

    (39) expression -> ID . LPAREN arg_list RPAREN
    (56) expression -> ID .

    LPAREN          shift and go to state 40
    SEMICOLON       reduce using rule 56 (expression -> ID .)
    PLUS            reduce using rule 56 (expression -> ID .)
    MINUS           reduce using rule 56 (expression -> ID .)
    TIMES           reduce using rule 56 (expression -> ID .)
    DIVIDE          reduce using rule 56 (expression -> ID .)
    EQ              reduce using rule 56 (expression -> ID .)
    NEQ             reduce using rule 56 (expression -> ID .)
    GT              reduce using rule 56 (expression -> ID .)
    LT              reduce using rule 56 (expression -> ID .)
    AND             reduce using rule 56 (expression -> ID .)
    OR              reduce using rule 56 (expression -> ID .)
    RPAREN          reduce using rule 56 (expression -> ID .)
    COMMA           reduce using rule 56 (expression -> ID .)


state 31

    (7) var_declaration -> type ID ASSIGN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 32

    (51) expression -> LPAREN . expression RPAREN
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 52

state 33

    (50) expression -> NOT . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 53

state 34

    (52) expression -> INT_LITERAL .

    SEMICOLON       reduce using rule 52 (expression -> INT_LITERAL .)
    PLUS            reduce using rule 52 (expression -> INT_LITERAL .)
    MINUS           reduce using rule 52 (expression -> INT_LITERAL .)
    TIMES           reduce using rule 52 (expression -> INT_LITERAL .)
    DIVIDE          reduce using rule 52 (expression -> INT_LITERAL .)
    EQ              reduce using rule 52 (expression -> INT_LITERAL .)
    NEQ             reduce using rule 52 (expression -> INT_LITERAL .)
    GT              reduce using rule 52 (expression -> INT_LITERAL .)
    LT              reduce using rule 52 (expression -> INT_LITERAL .)
    AND             reduce using rule 52 (expression -> INT_LITERAL .)
    OR              reduce using rule 52 (expression -> INT_LITERAL .)
    RPAREN          reduce using rule 52 (expression -> INT_LITERAL .)
    COMMA           reduce using rule 52 (expression -> INT_LITERAL .)


state 35

    (53) expression -> STRING_LITERAL .

    SEMICOLON       reduce using rule 53 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 53 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 53 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 53 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 53 (expression -> STRING_LITERAL .)
    EQ              reduce using rule 53 (expression -> STRING_LITERAL .)
    NEQ             reduce using rule 53 (expression -> STRING_LITERAL .)
    GT              reduce using rule 53 (expression -> STRING_LITERAL .)
    LT              reduce using rule 53 (expression -> STRING_LITERAL .)
    AND             reduce using rule 53 (expression -> STRING_LITERAL .)
    OR              reduce using rule 53 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 53 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 53 (expression -> STRING_LITERAL .)


state 36

    (54) expression -> TRUE .

    SEMICOLON       reduce using rule 54 (expression -> TRUE .)
    PLUS            reduce using rule 54 (expression -> TRUE .)
    MINUS           reduce using rule 54 (expression -> TRUE .)
    TIMES           reduce using rule 54 (expression -> TRUE .)
    DIVIDE          reduce using rule 54 (expression -> TRUE .)
    EQ              reduce using rule 54 (expression -> TRUE .)
    NEQ             reduce using rule 54 (expression -> TRUE .)
    GT              reduce using rule 54 (expression -> TRUE .)
    LT              reduce using rule 54 (expression -> TRUE .)
    AND             reduce using rule 54 (expression -> TRUE .)
    OR              reduce using rule 54 (expression -> TRUE .)
    RPAREN          reduce using rule 54 (expression -> TRUE .)
    COMMA           reduce using rule 54 (expression -> TRUE .)


state 37

    (55) expression -> FALSE .

    SEMICOLON       reduce using rule 55 (expression -> FALSE .)
    PLUS            reduce using rule 55 (expression -> FALSE .)
    MINUS           reduce using rule 55 (expression -> FALSE .)
    TIMES           reduce using rule 55 (expression -> FALSE .)
    DIVIDE          reduce using rule 55 (expression -> FALSE .)
    EQ              reduce using rule 55 (expression -> FALSE .)
    NEQ             reduce using rule 55 (expression -> FALSE .)
    GT              reduce using rule 55 (expression -> FALSE .)
    LT              reduce using rule 55 (expression -> FALSE .)
    AND             reduce using rule 55 (expression -> FALSE .)
    OR              reduce using rule 55 (expression -> FALSE .)
    RPAREN          reduce using rule 55 (expression -> FALSE .)
    COMMA           reduce using rule 55 (expression -> FALSE .)


state 38

    (4) const_declaration -> CONST type ID ASSIGN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       shift and go to state 54
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 39

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN . param_list RPAREN DO statement_list END
    (16) param_list -> . param_list COMMA param_decl
    (17) param_list -> . param_decl
    (18) param_list -> . empty
    (19) param_decl -> . type ID
    (61) empty -> .
    (57) type -> . VOID
    (58) type -> . INT
    (59) type -> . BOOL
    (60) type -> . STRING

    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)
    VOID            shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    STRING          shift and go to state 15

    param_list                     shift and go to state 55
    param_decl                     shift and go to state 56
    empty                          shift and go to state 57
    type                           shift and go to state 58

state 40

    (39) expression -> ID LPAREN . arg_list RPAREN
    (36) arg_list -> . arg_list COMMA expression
    (37) arg_list -> . expression
    (38) arg_list -> . empty
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID
    (61) empty -> .

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)

    arg_list                       shift and go to state 59
    expression                     shift and go to state 60
    empty                          shift and go to state 61

state 41

    (7) var_declaration -> type ID ASSIGN expression SEMICOLON .

    VOID            reduce using rule 7 (var_declaration -> type ID ASSIGN expression SEMICOLON .)
    INT             reduce using rule 7 (var_declaration -> type ID ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 7 (var_declaration -> type ID ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 7 (var_declaration -> type ID ASSIGN expression SEMICOLON .)
    SUBROUTINE      reduce using rule 7 (var_declaration -> type ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 7 (var_declaration -> type ID ASSIGN expression SEMICOLON .)


state 42

    (40) expression -> expression PLUS . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 62

state 43

    (41) expression -> expression MINUS . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 63

state 44

    (42) expression -> expression TIMES . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 64

state 45

    (43) expression -> expression DIVIDE . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 65

state 46

    (44) expression -> expression EQ . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 66

state 47

    (45) expression -> expression NEQ . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 67

state 48

    (46) expression -> expression GT . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 68

state 49

    (47) expression -> expression LT . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 69

state 50

    (48) expression -> expression AND . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 70

state 51

    (49) expression -> expression OR . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 71

state 52

    (51) expression -> LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    RPAREN          shift and go to state 72
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 53

    (50) expression -> NOT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       reduce using rule 50 (expression -> NOT expression .)
    PLUS            reduce using rule 50 (expression -> NOT expression .)
    MINUS           reduce using rule 50 (expression -> NOT expression .)
    TIMES           reduce using rule 50 (expression -> NOT expression .)
    DIVIDE          reduce using rule 50 (expression -> NOT expression .)
    EQ              reduce using rule 50 (expression -> NOT expression .)
    NEQ             reduce using rule 50 (expression -> NOT expression .)
    GT              reduce using rule 50 (expression -> NOT expression .)
    LT              reduce using rule 50 (expression -> NOT expression .)
    AND             reduce using rule 50 (expression -> NOT expression .)
    OR              reduce using rule 50 (expression -> NOT expression .)
    RPAREN          reduce using rule 50 (expression -> NOT expression .)
    COMMA           reduce using rule 50 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! NEQ             [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! LT              [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 54

    (4) const_declaration -> CONST type ID ASSIGN expression SEMICOLON .

    CONST           reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)
    INT             reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)
    SUBROUTINE      reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 4 (const_declaration -> CONST type ID ASSIGN expression SEMICOLON .)


state 55

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list . RPAREN DO statement_list END
    (16) param_list -> param_list . COMMA param_decl

    RPAREN          shift and go to state 73
    COMMA           shift and go to state 74


state 56

    (17) param_list -> param_decl .

    RPAREN          reduce using rule 17 (param_list -> param_decl .)
    COMMA           reduce using rule 17 (param_list -> param_decl .)


state 57

    (18) param_list -> empty .

    RPAREN          reduce using rule 18 (param_list -> empty .)
    COMMA           reduce using rule 18 (param_list -> empty .)


state 58

    (19) param_decl -> type . ID

    ID              shift and go to state 75


state 59

    (39) expression -> ID LPAREN arg_list . RPAREN
    (36) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 76
    COMMA           shift and go to state 77


state 60

    (37) arg_list -> expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    RPAREN          reduce using rule 37 (arg_list -> expression .)
    COMMA           reduce using rule 37 (arg_list -> expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 61

    (38) arg_list -> empty .

    RPAREN          reduce using rule 38 (arg_list -> empty .)
    COMMA           reduce using rule 38 (arg_list -> empty .)


state 62

    (40) expression -> expression PLUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 40 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 40 (expression -> expression PLUS expression .)
    EQ              reduce using rule 40 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 40 (expression -> expression PLUS expression .)
    GT              reduce using rule 40 (expression -> expression PLUS expression .)
    LT              reduce using rule 40 (expression -> expression PLUS expression .)
    AND             reduce using rule 40 (expression -> expression PLUS expression .)
    OR              reduce using rule 40 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 40 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 40 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45

  ! TIMES           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 46 ]
  ! NEQ             [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! LT              [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 63

    (41) expression -> expression MINUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       reduce using rule 41 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 41 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 41 (expression -> expression MINUS expression .)
    EQ              reduce using rule 41 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 41 (expression -> expression MINUS expression .)
    GT              reduce using rule 41 (expression -> expression MINUS expression .)
    LT              reduce using rule 41 (expression -> expression MINUS expression .)
    AND             reduce using rule 41 (expression -> expression MINUS expression .)
    OR              reduce using rule 41 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 41 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 41 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45

  ! TIMES           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 46 ]
  ! NEQ             [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! LT              [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 64

    (42) expression -> expression TIMES expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       reduce using rule 42 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 42 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 42 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 42 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 42 (expression -> expression TIMES expression .)
    EQ              reduce using rule 42 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 42 (expression -> expression TIMES expression .)
    GT              reduce using rule 42 (expression -> expression TIMES expression .)
    LT              reduce using rule 42 (expression -> expression TIMES expression .)
    AND             reduce using rule 42 (expression -> expression TIMES expression .)
    OR              reduce using rule 42 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 42 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 42 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! NEQ             [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! LT              [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 65

    (43) expression -> expression DIVIDE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 43 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 43 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 43 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 43 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 43 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 43 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 43 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 43 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 43 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 43 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 43 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! NEQ             [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! LT              [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 66

    (44) expression -> expression EQ expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 44 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 44 (expression -> expression EQ expression .)
    COMMA           reduce using rule 44 (expression -> expression EQ expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! PLUS            [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression EQ expression .) ]


state 67

    (45) expression -> expression NEQ expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 45 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 45 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 45 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! PLUS            [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression NEQ expression .) ]


state 68

    (46) expression -> expression GT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 46 (expression -> expression GT expression .)
    RPAREN          reduce using rule 46 (expression -> expression GT expression .)
    COMMA           reduce using rule 46 (expression -> expression GT expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! PLUS            [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression GT expression .) ]


state 69

    (47) expression -> expression LT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 47 (expression -> expression LT expression .)
    RPAREN          reduce using rule 47 (expression -> expression LT expression .)
    COMMA           reduce using rule 47 (expression -> expression LT expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! PLUS            [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 47 (expression -> expression LT expression .) ]


state 70

    (48) expression -> expression AND expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 48 (expression -> expression AND expression .)
    RPAREN          reduce using rule 48 (expression -> expression AND expression .)
    COMMA           reduce using rule 48 (expression -> expression AND expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! PLUS            [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 48 (expression -> expression AND expression .) ]


state 71

    (49) expression -> expression OR expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 49 (expression -> expression OR expression .)
    RPAREN          reduce using rule 49 (expression -> expression OR expression .)
    COMMA           reduce using rule 49 (expression -> expression OR expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! PLUS            [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression OR expression .) ]


state 72

    (51) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 51 (expression -> LPAREN expression RPAREN .)


state 73

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN . DO statement_list END

    DO              shift and go to state 78


state 74

    (16) param_list -> param_list COMMA . param_decl
    (19) param_decl -> . type ID
    (57) type -> . VOID
    (58) type -> . INT
    (59) type -> . BOOL
    (60) type -> . STRING

    VOID            shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    STRING          shift and go to state 15

    param_decl                     shift and go to state 79
    type                           shift and go to state 58

state 75

    (19) param_decl -> type ID .

    RPAREN          reduce using rule 19 (param_decl -> type ID .)
    COMMA           reduce using rule 19 (param_decl -> type ID .)


state 76

    (39) expression -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    AND             reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    OR              reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 39 (expression -> ID LPAREN arg_list RPAREN .)


state 77

    (36) arg_list -> arg_list COMMA . expression
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 80

state 78

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO . statement_list END
    (20) statement_list -> . statement_list statement
    (21) statement_list -> . empty
    (61) empty -> .

    END             reduce using rule 61 (empty -> .)
    ID              reduce using rule 61 (empty -> .)
    IF              reduce using rule 61 (empty -> .)
    WHILE           reduce using rule 61 (empty -> .)
    RETURN          reduce using rule 61 (empty -> .)
    PRINT           reduce using rule 61 (empty -> .)

    statement_list                 shift and go to state 81
    empty                          shift and go to state 82

state 79

    (16) param_list -> param_list COMMA param_decl .

    RPAREN          reduce using rule 16 (param_list -> param_list COMMA param_decl .)
    COMMA           reduce using rule 16 (param_list -> param_list COMMA param_decl .)


state 80

    (36) arg_list -> arg_list COMMA expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    RPAREN          reduce using rule 36 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 36 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 81

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO statement_list . END
    (20) statement_list -> statement_list . statement
    (22) statement -> . assignment_stmt
    (23) statement -> . if_stmt
    (24) statement -> . while_stmt
    (25) statement -> . return_stmt
    (26) statement -> . print_stmt
    (27) statement -> . call_stmt SEMICOLON
    (28) assignment_stmt -> . ID ASSIGN expression SEMICOLON
    (29) if_stmt -> . IF LPAREN expression RPAREN THEN statement_list else_part END
    (32) while_stmt -> . WHILE LPAREN expression RPAREN DO statement_list END
    (33) return_stmt -> . RETURN expression SEMICOLON
    (34) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (35) call_stmt -> . ID LPAREN arg_list RPAREN

    END             shift and go to state 84
    ID              shift and go to state 83
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    PRINT           shift and go to state 95

    statement                      shift and go to state 85
    assignment_stmt                shift and go to state 86
    if_stmt                        shift and go to state 87
    while_stmt                     shift and go to state 88
    return_stmt                    shift and go to state 89
    print_stmt                     shift and go to state 90
    call_stmt                      shift and go to state 91

state 82

    (21) statement_list -> empty .

    END             reduce using rule 21 (statement_list -> empty .)
    ID              reduce using rule 21 (statement_list -> empty .)
    IF              reduce using rule 21 (statement_list -> empty .)
    WHILE           reduce using rule 21 (statement_list -> empty .)
    RETURN          reduce using rule 21 (statement_list -> empty .)
    PRINT           reduce using rule 21 (statement_list -> empty .)
    ELSE            reduce using rule 21 (statement_list -> empty .)


state 83

    (28) assignment_stmt -> ID . ASSIGN expression SEMICOLON
    (35) call_stmt -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 96
    LPAREN          shift and go to state 97


state 84

    (11) subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO statement_list END .

    SUBROUTINE      reduce using rule 11 (subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO statement_list END .)
    $end            reduce using rule 11 (subroutine_decl -> SUBROUTINE subroutine_type ID LPAREN param_list RPAREN DO statement_list END .)


state 85

    (20) statement_list -> statement_list statement .

    END             reduce using rule 20 (statement_list -> statement_list statement .)
    ID              reduce using rule 20 (statement_list -> statement_list statement .)
    IF              reduce using rule 20 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 20 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 20 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 20 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 20 (statement_list -> statement_list statement .)


state 86

    (22) statement -> assignment_stmt .

    END             reduce using rule 22 (statement -> assignment_stmt .)
    ID              reduce using rule 22 (statement -> assignment_stmt .)
    IF              reduce using rule 22 (statement -> assignment_stmt .)
    WHILE           reduce using rule 22 (statement -> assignment_stmt .)
    RETURN          reduce using rule 22 (statement -> assignment_stmt .)
    PRINT           reduce using rule 22 (statement -> assignment_stmt .)
    ELSE            reduce using rule 22 (statement -> assignment_stmt .)


state 87

    (23) statement -> if_stmt .

    END             reduce using rule 23 (statement -> if_stmt .)
    ID              reduce using rule 23 (statement -> if_stmt .)
    IF              reduce using rule 23 (statement -> if_stmt .)
    WHILE           reduce using rule 23 (statement -> if_stmt .)
    RETURN          reduce using rule 23 (statement -> if_stmt .)
    PRINT           reduce using rule 23 (statement -> if_stmt .)
    ELSE            reduce using rule 23 (statement -> if_stmt .)


state 88

    (24) statement -> while_stmt .

    END             reduce using rule 24 (statement -> while_stmt .)
    ID              reduce using rule 24 (statement -> while_stmt .)
    IF              reduce using rule 24 (statement -> while_stmt .)
    WHILE           reduce using rule 24 (statement -> while_stmt .)
    RETURN          reduce using rule 24 (statement -> while_stmt .)
    PRINT           reduce using rule 24 (statement -> while_stmt .)
    ELSE            reduce using rule 24 (statement -> while_stmt .)


state 89

    (25) statement -> return_stmt .

    END             reduce using rule 25 (statement -> return_stmt .)
    ID              reduce using rule 25 (statement -> return_stmt .)
    IF              reduce using rule 25 (statement -> return_stmt .)
    WHILE           reduce using rule 25 (statement -> return_stmt .)
    RETURN          reduce using rule 25 (statement -> return_stmt .)
    PRINT           reduce using rule 25 (statement -> return_stmt .)
    ELSE            reduce using rule 25 (statement -> return_stmt .)


state 90

    (26) statement -> print_stmt .

    END             reduce using rule 26 (statement -> print_stmt .)
    ID              reduce using rule 26 (statement -> print_stmt .)
    IF              reduce using rule 26 (statement -> print_stmt .)
    WHILE           reduce using rule 26 (statement -> print_stmt .)
    RETURN          reduce using rule 26 (statement -> print_stmt .)
    PRINT           reduce using rule 26 (statement -> print_stmt .)
    ELSE            reduce using rule 26 (statement -> print_stmt .)


state 91

    (27) statement -> call_stmt . SEMICOLON

    SEMICOLON       shift and go to state 98


state 92

    (29) if_stmt -> IF . LPAREN expression RPAREN THEN statement_list else_part END

    LPAREN          shift and go to state 99


state 93

    (32) while_stmt -> WHILE . LPAREN expression RPAREN DO statement_list END

    LPAREN          shift and go to state 100


state 94

    (33) return_stmt -> RETURN . expression SEMICOLON
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 101

state 95

    (34) print_stmt -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 102


state 96

    (28) assignment_stmt -> ID ASSIGN . expression SEMICOLON
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 103

state 97

    (35) call_stmt -> ID LPAREN . arg_list RPAREN
    (36) arg_list -> . arg_list COMMA expression
    (37) arg_list -> . expression
    (38) arg_list -> . empty
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID
    (61) empty -> .

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)

    arg_list                       shift and go to state 104
    expression                     shift and go to state 60
    empty                          shift and go to state 61

state 98

    (27) statement -> call_stmt SEMICOLON .

    END             reduce using rule 27 (statement -> call_stmt SEMICOLON .)
    ID              reduce using rule 27 (statement -> call_stmt SEMICOLON .)
    IF              reduce using rule 27 (statement -> call_stmt SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> call_stmt SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> call_stmt SEMICOLON .)
    PRINT           reduce using rule 27 (statement -> call_stmt SEMICOLON .)
    ELSE            reduce using rule 27 (statement -> call_stmt SEMICOLON .)


state 99

    (29) if_stmt -> IF LPAREN . expression RPAREN THEN statement_list else_part END
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 105

state 100

    (32) while_stmt -> WHILE LPAREN . expression RPAREN DO statement_list END
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 106

state 101

    (33) return_stmt -> RETURN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       shift and go to state 107
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 102

    (34) print_stmt -> PRINT LPAREN . expression RPAREN SEMICOLON
    (39) expression -> . ID LPAREN arg_list RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression EQ expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . NOT expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . INT_LITERAL
    (53) expression -> . STRING_LITERAL
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . ID

    ID              shift and go to state 30
    NOT             shift and go to state 33
    LPAREN          shift and go to state 32
    INT_LITERAL     shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    expression                     shift and go to state 108

state 103

    (28) assignment_stmt -> ID ASSIGN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    SEMICOLON       shift and go to state 109
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 104

    (35) call_stmt -> ID LPAREN arg_list . RPAREN
    (36) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 110
    COMMA           shift and go to state 77


state 105

    (29) if_stmt -> IF LPAREN expression . RPAREN THEN statement_list else_part END
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    RPAREN          shift and go to state 111
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 106

    (32) while_stmt -> WHILE LPAREN expression . RPAREN DO statement_list END
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    RPAREN          shift and go to state 112
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 107

    (33) return_stmt -> RETURN expression SEMICOLON .

    END             reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 33 (return_stmt -> RETURN expression SEMICOLON .)


state 108

    (34) print_stmt -> PRINT LPAREN expression . RPAREN SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . EQ expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GT expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51


state 109

    (28) assignment_stmt -> ID ASSIGN expression SEMICOLON .

    END             reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 28 (assignment_stmt -> ID ASSIGN expression SEMICOLON .)


state 110

    (35) call_stmt -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 35 (call_stmt -> ID LPAREN arg_list RPAREN .)


state 111

    (29) if_stmt -> IF LPAREN expression RPAREN . THEN statement_list else_part END

    THEN            shift and go to state 114


state 112

    (32) while_stmt -> WHILE LPAREN expression RPAREN . DO statement_list END

    DO              shift and go to state 115


state 113

    (34) print_stmt -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 116


state 114

    (29) if_stmt -> IF LPAREN expression RPAREN THEN . statement_list else_part END
    (20) statement_list -> . statement_list statement
    (21) statement_list -> . empty
    (61) empty -> .

    ELSE            reduce using rule 61 (empty -> .)
    ID              reduce using rule 61 (empty -> .)
    IF              reduce using rule 61 (empty -> .)
    WHILE           reduce using rule 61 (empty -> .)
    RETURN          reduce using rule 61 (empty -> .)
    PRINT           reduce using rule 61 (empty -> .)
    END             reduce using rule 61 (empty -> .)

    statement_list                 shift and go to state 117
    empty                          shift and go to state 82

state 115

    (32) while_stmt -> WHILE LPAREN expression RPAREN DO . statement_list END
    (20) statement_list -> . statement_list statement
    (21) statement_list -> . empty
    (61) empty -> .

    END             reduce using rule 61 (empty -> .)
    ID              reduce using rule 61 (empty -> .)
    IF              reduce using rule 61 (empty -> .)
    WHILE           reduce using rule 61 (empty -> .)
    RETURN          reduce using rule 61 (empty -> .)
    PRINT           reduce using rule 61 (empty -> .)

    statement_list                 shift and go to state 118
    empty                          shift and go to state 82

state 116

    (34) print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .

    END             reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 34 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 117

    (29) if_stmt -> IF LPAREN expression RPAREN THEN statement_list . else_part END
    (20) statement_list -> statement_list . statement
    (30) else_part -> . ELSE statement_list
    (31) else_part -> . empty
    (22) statement -> . assignment_stmt
    (23) statement -> . if_stmt
    (24) statement -> . while_stmt
    (25) statement -> . return_stmt
    (26) statement -> . print_stmt
    (27) statement -> . call_stmt SEMICOLON
    (61) empty -> .
    (28) assignment_stmt -> . ID ASSIGN expression SEMICOLON
    (29) if_stmt -> . IF LPAREN expression RPAREN THEN statement_list else_part END
    (32) while_stmt -> . WHILE LPAREN expression RPAREN DO statement_list END
    (33) return_stmt -> . RETURN expression SEMICOLON
    (34) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (35) call_stmt -> . ID LPAREN arg_list RPAREN

    ELSE            shift and go to state 120
    END             reduce using rule 61 (empty -> .)
    ID              shift and go to state 83
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    PRINT           shift and go to state 95

    else_part                      shift and go to state 119
    statement                      shift and go to state 85
    empty                          shift and go to state 121
    assignment_stmt                shift and go to state 86
    if_stmt                        shift and go to state 87
    while_stmt                     shift and go to state 88
    return_stmt                    shift and go to state 89
    print_stmt                     shift and go to state 90
    call_stmt                      shift and go to state 91

state 118

    (32) while_stmt -> WHILE LPAREN expression RPAREN DO statement_list . END
    (20) statement_list -> statement_list . statement
    (22) statement -> . assignment_stmt
    (23) statement -> . if_stmt
    (24) statement -> . while_stmt
    (25) statement -> . return_stmt
    (26) statement -> . print_stmt
    (27) statement -> . call_stmt SEMICOLON
    (28) assignment_stmt -> . ID ASSIGN expression SEMICOLON
    (29) if_stmt -> . IF LPAREN expression RPAREN THEN statement_list else_part END
    (32) while_stmt -> . WHILE LPAREN expression RPAREN DO statement_list END
    (33) return_stmt -> . RETURN expression SEMICOLON
    (34) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (35) call_stmt -> . ID LPAREN arg_list RPAREN

    END             shift and go to state 122
    ID              shift and go to state 83
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    PRINT           shift and go to state 95

    statement                      shift and go to state 85
    assignment_stmt                shift and go to state 86
    if_stmt                        shift and go to state 87
    while_stmt                     shift and go to state 88
    return_stmt                    shift and go to state 89
    print_stmt                     shift and go to state 90
    call_stmt                      shift and go to state 91

state 119

    (29) if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part . END

    END             shift and go to state 123


state 120

    (30) else_part -> ELSE . statement_list
    (20) statement_list -> . statement_list statement
    (21) statement_list -> . empty
    (61) empty -> .

    ID              reduce using rule 61 (empty -> .)
    IF              reduce using rule 61 (empty -> .)
    WHILE           reduce using rule 61 (empty -> .)
    RETURN          reduce using rule 61 (empty -> .)
    PRINT           reduce using rule 61 (empty -> .)
    END             reduce using rule 61 (empty -> .)

    statement_list                 shift and go to state 124
    empty                          shift and go to state 82

state 121

    (31) else_part -> empty .

    END             reduce using rule 31 (else_part -> empty .)


state 122

    (32) while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .

    END             reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)
    ID              reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)
    IF              reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)
    WHILE           reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)
    RETURN          reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)
    PRINT           reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)
    ELSE            reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN DO statement_list END .)


state 123

    (29) if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .

    END             reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)
    ID              reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)
    IF              reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)
    WHILE           reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)
    RETURN          reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)
    PRINT           reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)
    ELSE            reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN THEN statement_list else_part END .)


state 124

    (30) else_part -> ELSE statement_list .
    (20) statement_list -> statement_list . statement
    (22) statement -> . assignment_stmt
    (23) statement -> . if_stmt
    (24) statement -> . while_stmt
    (25) statement -> . return_stmt
    (26) statement -> . print_stmt
    (27) statement -> . call_stmt SEMICOLON
    (28) assignment_stmt -> . ID ASSIGN expression SEMICOLON
    (29) if_stmt -> . IF LPAREN expression RPAREN THEN statement_list else_part END
    (32) while_stmt -> . WHILE LPAREN expression RPAREN DO statement_list END
    (33) return_stmt -> . RETURN expression SEMICOLON
    (34) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (35) call_stmt -> . ID LPAREN arg_list RPAREN

    END             reduce using rule 30 (else_part -> ELSE statement_list .)
    ID              shift and go to state 83
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    PRINT           shift and go to state 95

    statement                      shift and go to state 85
    assignment_stmt                shift and go to state 86
    if_stmt                        shift and go to state 87
    while_stmt                     shift and go to state 88
    return_stmt                    shift and go to state 89
    print_stmt                     shift and go to state 90
    call_stmt                      shift and go to state 91
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 67 resolved as shift
WARNING: shift/reduce conflict for GT in state 67 resolved as shift
WARNING: shift/reduce conflict for LT in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for GT in state 68 resolved as shift
WARNING: shift/reduce conflict for LT in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GT in state 69 resolved as shift
WARNING: shift/reduce conflict for LT in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for GT in state 71 resolved as shift
WARNING: shift/reduce conflict for LT in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
